/*
 * Copyright (C) 2018 Robert Hutter
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package remotemapper;

import java.awt.Color;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.web.WebView;
import javax.swing.SwingWorker;
import remotemapper.classes.mapping.CharMap;

/**
 *
 * @author rohu7
 */
public class MapPreviewer extends javax.swing.JFrame {
    private File mapFile;
    private CharMap map;
    private WebView mapView;
    
    private final String MAP_NODE = "<div class=\"node\"></div>";
    
    {
        WindowListener exitListener = new WindowAdapter()
        {
            @Override
            public void windowClosing(WindowEvent e)
            {
                MapPreviewer.this.dispose();
            }
        };
        addWindowListener(exitListener);
    }

    /**
     * Creates new form MapPreviewer
     * @param map The map to be viewed
     * @param mapFile The file to save the map to if anything is changed.
     */
    public MapPreviewer(CharMap map, File mapFile) {
        this.mapFile = mapFile;
        this.map = map;
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MapPreviewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        initComponents();
        
        final JFXPanel fxPanel1 = new JFXPanel();
        
        fxPanel1.setBounds(0, 0, mapPanel.getWidth(), mapPanel.getHeight());
        mapPanel.add(fxPanel1, Color.WHITE);
        
        Platform.runLater(() -> {
            initFX(fxPanel1);
        });
        
        mapPanel.addComponentListener(new ComponentAdapter()
        {
            @Override
            public void componentResized(ComponentEvent e) {
                fxPanel1.setBounds(0, 0, mapPanel.getWidth(), mapPanel.getHeight());
            }
        });
        
        super.setVisible(true);
    }
    
    private void initFX(JFXPanel fxPanel)
    {
        mapView = new WebView();
        
        final Scene mapScene = new Scene(new Group());
        mapScene.setRoot(mapView);
        
        fxPanel.setScene(mapScene);
        
        MapUpdater mu = new MapUpdater();
        mu.execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        mapPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("remotemapper/Bundle"); // NOI18N
        setTitle(bundle.getString("MapPreviewer.title")); // NOI18N
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/map.png")).getImage());

        jLabel1.setText(bundle.getString("MapPreviewer.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(884, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 43, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout mapPanelLayout = new javax.swing.GroupLayout(mapPanel);
        mapPanel.setLayout(mapPanelLayout);
        mapPanelLayout.setHorizontalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        mapPanelLayout.setVerticalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 542, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(mapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel mapPanel;
    // End of variables declaration//GEN-END:variables

    public boolean close() {
        return true;
    }
    
    class MapUpdater extends SwingWorker<Void, Void>
    {
        
        @Override
        protected Void doInBackground() throws Exception {
            
            Platform.runLater(() -> {
                mapView.getEngine().loadContent(getHTML(map.getMap(), 4, map.getObsticalMark(), map.getEmptySpaceMark()));
            });
               
            return null;
        }
        
        private String getHTML(char[][] data, int nodeSize, char obsticalMark, char emptyMark)
        {
            StringBuilder sb = new StringBuilder("<html>" + 
                "<style> .node {" +
                "height: "+ nodeSize +"px;" +
                "width: "+ nodeSize +"px;" +
                "background-color: green;" + 
                "line-height: " + nodeSize + "px;" +
                "display: table-cell;" +
                "}" +
                "</style>"
            );
            
            for (int y = 0; y < data.length; y++)
            {
                for (int x = 0; x < data[0].length; x++)
                {
                    if (data[y][x] == obsticalMark)
                    {
                        sb.append("<div class=\"node\" style=\"background-color: red;\"></div>");
                    }
                    else if (data[y][x] != emptyMark)
                    {
                        sb.append("<div class=\"node\" style=\"background-color: yellow;\"></div>");
                    }
                    else
                    {
                        sb.append(MAP_NODE);
                    }
                }
                
                if (y != data.length - 1)
                {
                    sb.append("<div class=\"node\" style=\"display: inline;\"></div>");
                }
            }
            
            sb.append("</font></html>");
            
            return sb.toString();
        }
    }
}
